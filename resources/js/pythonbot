import logging
import psycopg2
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

NAME, EMAIL, PASSWORD, CONFIRM = range(4)

# Database Configuration - Matches Laravel Sail's default PostgreSQL config
DB_CONFIG = {
    'dbname': 'laravel',
    'user': 'sail',
    'password': 'password',
    'host': 'pgsql',  # This is the service name in docker-compose
    'port': '5432'
}

BOT_TOKEN = "7886668986:AAEcwC6QJWykSK7-KWPak5LXVtp11cfd5QM"

def get_db_connection():
    """Establish database connection"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the conversation and ask for name."""
    # Store the chat ID for later use
    context.user_data['telegram_chat_id'] = update.message.chat_id
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store the name and ask for email."""
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "üìß –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:",
        reply_markup=ReplyKeyboardRemove()
    )
    return EMAIL

async def email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store the email and ask for password."""
    email = update.message.text
    if "@" not in email or "." not in email:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
        return EMAIL
    
    context.user_data['email'] = email
    await update.message.reply_text(
        "üîí –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 8 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    return PASSWORD

async def password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store the password and ask for confirmation."""
    password = update.message.text
    if len(password) < 8:
        await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return PASSWORD
    
    context.user_data['password'] = password

    reply_keyboard = [["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]]
    await update.message.reply_text(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ò–º—è: {context.user_data['name']}\n"
        f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {context.user_data['email']}\n\n"
        f"–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, 
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Confirm registration and save to database."""
    user_choice = update.message.text
    
    if user_choice == "‚ùå –ù–µ—Ç":
        await update.message.reply_text(
            "üîÑ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NAME
    
    user_data = {
        'name': context.user_data['name'],
        'email': context.user_data['email'],
        'password': context.user_data['password'],
        'telegram_chat_id': context.user_data['telegram_chat_id']
    }

    conn = get_db_connection()
    if not conn:
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    try:
        with conn.cursor() as cursor:
            # Check if user exists
            cursor.execute(
                "SELECT id FROM users WHERE email = %s OR telegram_chat_id = %s",
                (user_data['email'], user_data['telegram_chat_id'])
            )
            if cursor.fetchone():
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END

            # Insert new user
            cursor.execute(
                """INSERT INTO users (name, email, password, telegram_chat_id, created_at)
                VALUES (%s, %s, %s, %s, NOW()) RETURNING id""",
                (user_data['name'], user_data['email'], user_data['password'], 
                 user_data['telegram_chat_id'])
            )
            user_id = cursor.fetchone()[0]
            conn.commit()

            await update.message.reply_text(
                f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                f"–í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}",
                reply_markup=ReplyKeyboardRemove()
            )

    except Exception as e:
        logger.error(f"Database error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    finally:
        if conn:
            conn.close()
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel the conversation."""
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main() -> None:
    """Run the bot."""
    application = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password)],
            CONFIRM: [MessageHandler(filters.Regex("^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$"), confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(conv_handler)   
    application.run_polling()

if __name__ == "__main__":
    main()